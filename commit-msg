#!/bin/sh  
  
COMMIT_MESSAGE_FILE=$1  
MESSAGE=$(cat "$COMMIT_MESSAGE_FILE")  
  
sed -i '' -e '/^#/d' $COMMIT_MESSAGE_FILE

## type checking
COMMIT_TYPE=$(cat $COMMIT_MESSAGE_FILE | head -1 | cut -d ":" -f1 | cut -d " " -f1)
IS_VALID=NO
AVAILABLE_TYPE=( feat fix refactor perf docs style test chore init merge Merge)
for TYPE in ${AVAILABLE_TYPE[@]}; do
    if [ "$COMMIT_TYPE" = "$TYPE" ]; then
        IS_VALID=YES
    fi
done
if [ "$IS_VALID" = NO ]; then
    echo >&2 "COMMIT FAILED"
    echo >&2 "Type message must be in the title"
    echo >&2 "Available type: ${AVAILABLE_TYPE[@]}"
    exit 1
fi
  
# 브랜치 이름에서 마지막 '/' 이후의 문자열만 남긴다. '/'가 없다면 브랜치 전체 이름이 POSTFIX 된다.  
# POSTFIX의 첫 번째 '-' 앞뒤의 문자열만 포함한다. '-'가 없다면 변경은 없다  
# e.g.)  
# | branch name      | postfix    |  
# |------------------|------------|  
# | chore/KICK-611   | KICK-611   |  
# | chore/KICK-611-1 | KICK-611   |  
# | KICK-611         | KICK-611   |  
# | NODASH           | NODASH     |  
POSTFIX=$(git branch | grep '\*' | sed 's/* //' | sed 's/^.*\///' | sed 's/^\([^-]*-[^-]*\).*/\1/')  

# If POSTFIX is 'master' or 'main', do not modify commit message
if [[ "$POSTFIX" == "master" ]] || [[ "$POSTFIX" == "main" ]]; then
  exit 0
fi
  
printf "%s\n\n%s" "$MESSAGE" "$POSTFIX" > "$COMMIT_MESSAGE_FILE"
